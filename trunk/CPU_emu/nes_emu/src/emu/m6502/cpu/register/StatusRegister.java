package emu.m6502.cpu.register;

/**
 * 状态寄存器
 * 
 * 这个寄存器包括8个 "标记" (标记 = 显示某些事情发生或者没有发生的东西). 这个寄存器中的位的值得修改<br>
 * 依赖于算术和逻辑运算的结果. 位被描述如下:<br>
 * <br>
 * Bit No. 7 6 5 4 3 2 1 0<br>
 * S V B D I Z C<br>
 * <br>
 * Bit 0 - C - 进位标记 (Carry flag): 这个标记保存了任何算术操作的大多数重要的位的进位. 然而在减法操<br>
 * 作中，这个标记被清空 - 需要借位责备设置为0，不需要借位则被设置为1. 进位标记也在逻辑操作转移<br>
 * (shift)和交替 (rorate) 中被使用.<br>
 * <br>
 * Bit 1 - Z - 零标记 (Zero flag): 当任何的算术或逻辑操作产生零结果的时候被设置为1，产生非零结果时被<br>
 * 设置为0.<br>
 * <br>
 * Bit 2 - I: 这是一个允许/禁止中断标记. 如果被设置，则禁止中断. 如果被清空，则允许中断.<br>
 * <br>
 * Bit 3 - D: 这是十进制模式状态标记. 当这个标记被设置，并且需要进位的加或者需要进位的减被执行，原始<br>
 * 值就被转换成为有效的 BCD 码 (Binary Codec Decimal: 二--十进制码，例如: 0x00 - 0x99 = 0 - 99). 生成<br>
 * 的结果仍旧是 BCD 码.<br>
 * <br>
 * Bit 4 - B: 当一个软件中断 (BRK 指令)被执行的时候，这个标记被设置.<br>
 * <br>
 * Bit 5: 未被使用. 任何时候都假定是逻辑1.<br>
 * <br>
 * Bit 6 - V - 溢出标记 (Overflow flag): 当一个算术操作产生出一个过大的结果 (比一字节能描述的大), V 标<br>
 * 记被设置.<br>
 * <br>
 * Bit 7 - S - 信号标记 (Sign flag): 当一个操作的结果被否定时，这个标记被设置; 当结果被肯定是，标记被清<br>
 * 空.<br>
 * 
 * @author Tommy.Wang
 * 
 */
public class StatusRegister extends Register {

}
